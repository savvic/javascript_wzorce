// Generated by CoffeeScript 1.12.7
(function() {
  var EventEmmiter, Foo, Gadget, Gadget_2, Gadget_3, MYAPP, Person, Sandbox, a, aFunction, add, addPerson, added, after, conf, constant, defineObjKeysWithIIFE, dsa, e, faz, findNodes, fs, g1, g2, hasOwn, hide, i, iphone, ipod, log, man, method, module2, module3, myFunc1, myFunc2, myLitObj, myapp, myarr, newAdd, next, numFile, objChain, pry, result, s, schonfinkelize, server, setup, sp, sth, strFile, toy,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  log = console.log.bind(console);

  fs = require('fs');

  numFile = './numbers.txt';

  strFile = './string.txt';

  EventEmmiter = require('events');

  server = require('http').createServer();

  pry = require('pry');

  after = function(ms, fn) {
    return setTimeout(fn, ms);
  };

  man = {
    hands: 2,
    legs: 2,
    heads: 1
  };

  Object.prototype.myFunction = function() {
    if (typeof Object.prototype.myFunction === 'undefined' || Object.prototype.myFunction !== 'function') {
      return log('myFunction is my element');
    }
  };

  for (i in man) {
    log(i, ":", man[i]);
  }

  hasOwn = Object.prototype.hasOwnProperty;

  for (i in man) {
    if (hasOwn.call(man, i)) {
      log(i, ":", man[i]);
    }
  }

  if (!(this instanceof arguments.callee)) {
    return new arguments.callee();
  }

  try {
    throw {
      name: 'MyError',
      message: 'wtf',
      extra: 'shit happens',
      remedy: function() {
        return log('genericErrorHandler');
      }
    };
  } catch (error) {
    e = error;
    log(e.message);
    log(e.name);
    e.remedy();
  }

  function foo() {};

  var sth = function sth() {};;

  (function() {});

  sth = function() {};

  findNodes = function(callback) {
    var found, nodes, results;
    nodes = [];
    found = 'znaleziony cb';
    if (typeof callback !== 'function') {
      callback = false;
    }
    results = [];
    while (i) {
      if (callback) {
        callback(found);
      }
      nodes.push(found);
      i = false;
      results.push(log(nodes));
    }
    return results;
  };

  hide = function(node) {
    return log("hide the node number " + node);
  };

  findNodes(hide);

  myapp = {};

  myapp.color = "green";

  myapp.paint = function(node) {
    return log("the node is " + node);
  };

  findNodes = function(callback, cb_obj) {
    var found;
    found = 'foundeded';
    if (typeof callback === 'function') {
      callback.call(cb_obj, found);
    }
    if (typeof callback === 'string') {
      return callback = cb_obj[callback];
    }
  };

  findNodes(myapp.paint, myapp);

  log(findNodes('color', myapp));

  setup = function() {
    var counter, ret;
    counter = 0;
    ret = function() {
      return counter += 1;
    };
    return ret;
  };

  next = setup();

  log(next());

  log(next());

  aFunction = function() {
    log('first definition of aFunction');
    return aFunction = function() {
      return log('second definition of aFunction');
    };
  };

  aFunction();

  aFunction();

  (function(global, who, today) {
    var days, dzisiaj, msg;
    log('Immediately Invoked Function Expression');
    days = ['niedz.', 'pon.', 'wt.', 'śr.', 'czw.', 'pt.', 'sob.'];
    dzisiaj = today;
    msg = who + ", dziś jest " + days[dzisiaj.getDay()] + " " + (dzisiaj.getDate());
    return log(msg);
  })(this, 'Tomek', new Date());

  result = (function() {
    return 2 + 2;
  })();

  log(result);

  defineObjKeysWithIIFE = {
    msg: (function() {
      var what, who;
      who = 'Tomka';
      what = 'zadzwoń do';
      return what + " " + who;
    })(),
    getMsg: function() {
      return log(this.msg);
    }
  };

  defineObjKeysWithIIFE.getMsg();

  ({
    maxWidth: 500,
    maxHeight: 1000,
    getSquare: function() {
      return this.maxWidth * this.maxHeight;
    },
    init: function() {
      return log(this.getSquare());
    }
  }).init();

  myFunc1 = function(param) {
    if (!myFunc1.cache[param]) {
      result = {};
      myFunc1.cache[param] = result;
    }
    return myFunc1.cache[param];
  };

  myFunc1.cache = {};

  myFunc1('name');

  myFunc1.cache.name = 'tomek is fucking cached';

  log(myFunc1.cache.name);

  myFunc2 = function() {
    var cachekey;
    cachekey = JSON.stringify(Array.prototype.slice.call(arguments));
    result = {};
    if (!myFunc2.cache[cachekey]) {
      result = {};
      myFunc2.cache[cachekey] = result;
    }
    return myFunc2.cache[cachekey];
  };

  myFunc2.cache = {};

  conf = {
    username: "batman",
    first: "Bruce",
    last: "Wayne"
  };

  addPerson = function(conf) {
    return log(conf);
  };

  addPerson(conf);

  addPerson.apply(null, [conf]);

  add = function(a, b) {
    if (b == null) {
      return function(c) {
        return c + a;
      };
    }
    return a + b;
  };

  dsa = add(5);

  log(dsa(4));

  schonfinkelize = function(fn) {
    var slice, stored_args;
    slice = Array.prototype.slice;
    stored_args = slice.call(arguments, 1);
    return function() {
      var args, new_args;
      new_args = slice.call(arguments);
      args = stored_args.concat(new_args);
      return fn.apply(null, args);
    };
  };

  added = function(x, y, z) {
    return x + y + z;
  };

  log(added(4, 3, 0));

  newAdd = schonfinkelize(added, 15, 5);

  log(newAdd(1));

  MYAPP = MYAPP || {};

  MYAPP.namespace = function(ns_string) {
    var j, len, parent, parts;
    parts = ns_string.split('.');
    parent = MYAPP;
    if (parts[0] === 'MYAPP') {
      parts = parts.slice(1);
    }
    for (j = 0, len = parts.length; j < len; j++) {
      i = parts[j];
      if (parent[i] == null) {
        parent[i] = {};
      }
      parent = parent[i];
    }
    return parent;
  };

  module2 = MYAPP.namespace('MYAPP.modules.module2');

  module3 = MYAPP.namespace('MYAPP.modules.module3');

  log(module2 === MYAPP.modules.module2);

  log(MYAPP);

  log(MYAPP.namespace);

  Gadget = (function() {
    var name;

    function Gadget() {
      this.getName = bind(this.getName, this);
    }

    Gadget.lastName = function(lN) {
      return log(lN);
    };

    name = 'iPod';

    Gadget.prototype.getName = function() {
      return "getName returns " + name;
    };

    return Gadget;

  })();

  toy = new Gadget;

  log(toy.name);

  log(toy.getName());

  Gadget.lastName('tomac');

  Foo = (function() {
    var foo;

    function Foo() {}

    foo = function() {
      return log("foo");
    };

    Foo.prototype.bar = function() {
      return foo();
    };

    return Foo;

  })();

  Foo.prototype.foo1 = function() {
    return log("foo1");
  };

  faz = new Foo;

  faz.foo2 = function() {
    return log("foo2");
  };

  for (i in faz) {
    log(i, ":", faz[i]);
  }

  faz.bar();

  faz.foo2();

  Gadget_2 = (function() {
    var specs;

    function Gadget_2() {}

    specs = {
      screenWidth: 333,
      screenHight: 777,
      color: 'black'
    };

    Gadget_2.prototype.getSpecs = function() {
      return specs;
    };

    return Gadget_2;

  })();

  sp = new Gadget_2;

  s = sp.getSpecs();

  log(s);

  s.price = 500;

  s.color = 'red';

  log(sp.getSpecs());

  log(sp.specs);

  myLitObj = (function() {
    var name;
    name = 'ojej';
    return {
      getName: function() {
        return log(name);
      }
    };
  })();

  myLitObj.getName();

  Gadget.prototype.twoPatterns = (function() {
    var browser;
    browser = 'Mobile kit';
    return {
      getBrowser: function() {
        return log(browser);
      }
    };
  })();

  for (i in toy) {
    log(i, ":", toy[i]);
  }

  Gadget.prototype = (function () {
    // zmienna prywatna
  var br = "Mobile WebKit";
    // prototyp składowych publicznych
  return {
    getBrowser: function () {
      return br;
    }
  };
}());;

  toy.twoPatterns.getBrowser();

  myarr = {};

  (function() {
    var astr, indexOf, isArray, toString;
    astr = "[object Array]";
    toString = Object.prototype.toString;
    isArray = function(a) {
      return toString.call(a) === astr;
    };
    indexOf = function(haystack, needle) {
      var j, len, v;
      for (i = j = 0, len = haystack.length; j < len; i = ++j) {
        v = haystack[i];
        if (v === needle) {
          return i;
        }
      }
      return 1;
    };
    return myarr = {
      isArray: isArray,
      indexOf: indexOf,
      inArray: indexOf
    };
  })();

  MYAPP.namespace('MYAPP.utilities.array');

  log(MYAPP);

  MYAPP.utilities.array = (function() {
    var array_string, inArr, isArr, ops;
    array_string = "[object Array]";
    ops = Object.prototype.toString;
    isArr = function(a) {
      return ops.call(a) === array_string;
    };
    inArr = function(haystack, needle) {
      var j, len, v;
      for (i = j = 0, len = haystack.length; j < len; i = ++j) {
        v = haystack[i];
        if (v === needle) {
          return true;
        }
      }
    };
    return {
      sArr: isArr,
      nArr: inArr
    };
  })();

  log(MYAPP.utilities.array.ops);

  log(MYAPP.utilities.array);

  log(MYAPP.utilities.array.nArr(["a", "b", "z"], "z"));

  MYAPP.utilities.module = (function(app, global) {})(MYAPP, this);

  log(MYAPP.utilities);

  Sandbox = function() {
    var args, callback, j, len, modules;
    args = Array.prototype.slice.call(arguments);
    callback = args.pop();
    modules = (args[0] && typeof args[0] === "string") ? args : args[0];
    log("args are " + args);
    log("callback is " + callback);
    if (!(this instanceof Sandbox)) {
      return new Sandbox;
    }
    this.a = 1;
    this.b = 2;
    if (!(modules || modules === '*')) {
      modules = [];
      for (i in Sandbox.modules) {
        if (Sandbox.modules.hasOwnProperty(i)) {
          modules.push(i);
        }
      }
    }
    log(modules);
    for (j = 0, len = modules.length; j < len; j++) {
      i = modules[j];
      log(i);
      Sandbox.modules[i](this);
    }
    return callback(this);
  };

  Sandbox.prototype = {
    name: "Moja aplikacja",
    version: "1.0",
    getName: function() {
      return name;
    }
  };

  Sandbox.modules = {};

  Sandbox.modules.dom = function(box) {
    log("this is box: " + box);
    box.getElement = function() {
      return log('get element');
    };
    box.getStyle = function() {
      return log('get style');
    };
    return box.foo = "foo::bar";
  };

  Sandbox.modules.event = function(box) {
    log("this is box: " + box);
    box.attachEvent = function() {
      return log('attach event');
    };
    return box.detachEvent = function() {
      return log('detach event');
    };
  };

  log(Sandbox);

  log(Sandbox.prototype.name);

  for (i in Sandbox.prototype) {
    log(i);
  }

  Gadget_3 = (function() {
    var NewGadget, counter;
    counter = 0;
    NewGadget = function() {
      return log("Gadget_3 counter " + (counter += 1));
    };
    NewGadget.prototype.getLastId = function() {
      return log("getLastId is " + counter);
    };
    return NewGadget;
  })();

  g1 = new Gadget_3;

  g2 = new Gadget_3;

  log(g1);

  log(g1 instanceof Gadget_3);

  log("g1 counter is " + (g1.getLastId()));

  for (i in g1) {
    log("this is a property of g1: " + i);
  }

  iphone = new Gadget_3;

  iphone.getLastId();

  ipod = new Gadget_3;

  ipod.getLastId();

  Gadget_3.prototype.setPrice = function(price) {
    ({
      constructor: function(price1) {
        this.price = price1;
      }
    });
    return log(price);
  };

  Gadget_3.isShiny = function() {
    return log("of'course !");
  };

  iphone.setPrice(500);

  Gadget_3.isShiny();

  Gadget_3.prototype.isShiny = function() {
    return log("oczywiście że of'course!");
  };

  iphone.isShiny();

  objChain = {
    value: 1,
    increment: function() {
      this.value += 1;
      return this;
    },
    add: function(v) {
      this.value += v;
      return this;
    },
    shout: function() {
      return log(this.value);
    }
  };

  objChain.increment().add(7).shout();

  constant = (function() {
    var allowed, constants, ownProp, prefix;
    constants = {};
    ownProp = Object.prototype.hasOwnProperty;
    allowed = {
      string: 1,
      number: 1,
      boolean: 1
    };
    prefix = (Math.random + '_').slice(2);
    return {
      set: function(name, value) {
        if (this.isDefined(name)) {
          return false;
        }
        if (!ownProp.call(allowed, typeof value)) {
          return false;
        }
        constants[prefix + name] = value;
        return true;
      },
      isDefined: function(name) {
        return log(ownProp.call(constants, prefix + name));
      },
      get: function(name) {
        if (this.isDefined(name)) {
          return constants[prefix + name];
        }
      }
    };
  })();

  constant.isDefined('maxWidth');

  constant.set('minD', 300);

  constant.isDefined('minD');

  constant.get('minD');

  method = function() {
    if (typeof Person.prototype.method !== "function") {
      return Person.prototype.method = function(name, implementation) {
        this.prototype[name] = implementation;
        return this;
      };
    }
  };

  Person = (function() {
    function Person(name1) {
      this.name = name1;
    }

    return Person;

  })();

  method('getName', function() {
    return this.name;
  });

  method('setName', function(name) {
    this.name = name;
    return this;
  });

  a = new Person('adam');

  for (i in a) {
    log(i, ":", a[i]);
  }

}).call(this);
