// Generated by CoffeeScript 1.12.7
(function() {
  var EventEmmiter, Foo, Gadget, Gadget_2, MYAPP, aFunction, add, addPerson, added, after, conf, defineObjKeysWithIIFE, dsa, e, faz, findNodes, fs, hasOwn, hide, i, log, man, module2, myFunc1, myFunc2, myLitObj, myapp, newAdd, next, numFile, pry, result, s, schonfinkelize, server, setup, sp, sth, strFile, toy;

  log = console.log.bind(console);

  fs = require('fs');

  numFile = './numbers.txt';

  strFile = './string.txt';

  EventEmmiter = require('events');

  server = require('http').createServer();

  pry = require('pry');

  after = function(ms, fn) {
    return setTimeout(fn, ms);
  };

  man = {
    hands: 2,
    legs: 2,
    heads: 1
  };

  Object.prototype.myFunction = function() {
    if (typeof Object.prototype.myFunction === 'undefined' || Object.prototype.myFunction !== 'function') {
      return log('myFunction is my element');
    }
  };

  for (i in man) {
    log(i, ":", man[i]);
  }

  hasOwn = Object.prototype.hasOwnProperty;

  for (i in man) {
    if (hasOwn.call(man, i)) {
      log(i, ":", man[i]);
    }
  }

  if (!(this instanceof arguments.callee)) {
    return new arguments.callee();
  }

  try {
    throw {
      name: 'MyError',
      message: 'wtf',
      extra: 'shit happens',
      remedy: function() {
        return log('genericErrorHandler');
      }
    };
  } catch (error) {
    e = error;
    log(e.message);
    e.remedy();
  }

  function foo() {};

  var sth = function sth() {};;

  (function() {});

  sth = function() {};

  findNodes = function(callback) {
    var found, nodes, results;
    nodes = [];
    found = '';
    if (typeof callback !== 'function') {
      callback = false;
    }
    results = [];
    while (i) {
      if (callback) {
        callback(found);
      }
      nodes.push(found);
      i = false;
      results.push(nodes);
    }
    return results;
  };

  hide = function(node) {
    return log('hide the DOM node');
  };

  findNodes(hide);

  myapp = {};

  myapp.color = "green";

  myapp.paint = function(node) {
    return log("the node is " + node);
  };

  findNodes = function(callback, cb_obj) {
    var found;
    found = 'found';
    if (typeof callback === 'function') {
      callback.call(cb_obj, found);
    }
    if (typeof callback === 'string') {
      return callback = cb_obj[callback];
    }
  };

  findNodes(myapp.paint, myapp);

  findNodes('methods_name', myapp);

  setup = function() {
    var counter, ret;
    counter = 0;
    ret = function() {
      return counter += 1;
    };
    return ret;
  };

  next = setup();

  log(next());

  log(next());

  aFunction = function() {
    log('first definition of aFunction');
    return aFunction = function() {
      return log('second definition of aFunction');
    };
  };

  aFunction();

  aFunction();

  (function(global, who, today) {
    var days, dzisiaj, msg;
    log('Immediately Invoked Function Expression');
    days = ['niedz.', 'pon.', 'wt.', 'śr.', 'czw.', 'pt.', 'sob.'];
    dzisiaj = today;
    msg = who + ", dziś jest " + days[dzisiaj.getDay()] + " " + (dzisiaj.getDate());
    return log(msg);
  })(this, 'Tomek', new Date());

  result = (function() {
    return 2 + 2;
  })();

  log(result);

  defineObjKeysWithIIFE = {
    msg: (function() {
      var what, who;
      who = 'Tomka';
      what = 'zadzwoń do';
      return what + " " + who;
    })(),
    getMsg: function() {
      return log(this.msg);
    }
  };

  defineObjKeysWithIIFE.getMsg();

  ({
    maxWidth: 500,
    maxHeight: 1000,
    getSquare: function() {
      return this.maxWidth * this.maxHeight;
    },
    init: function() {
      return log(this.getSquare());
    }
  }).init();

  myFunc1 = function(param) {
    if (!myFunc1.cache[param]) {
      result = {};
      myFunc1.cache[param] = result;
    }
    return myFunc1.cache[param];
  };

  myFunc1.cache = {};

  myFunc2 = function() {
    var cachekey;
    cachekey = JSON.stringify(Array.prototype.slice.call(arguments));
    result = {};
    if (!myFunc2.cache[cachekey]) {
      result = {};
      myFunc2.cache[cachekey] = result;
    }
    return myFunc2.cache[cachekey];
  };

  myFunc2.cache = {};

  conf = {
    username: "batman",
    first: "Bruce",
    last: "Wayne"
  };

  addPerson = function(conf) {
    return log(conf);
  };

  addPerson(conf);

  addPerson.apply(null, [conf]);

  add = function(a, b) {
    if (b == null) {
      return function(c) {
        return c + a;
      };
    }
    return a + b;
  };

  dsa = add(5);

  log(dsa(4));

  schonfinkelize = function(fn) {
    var slice, stored_args;
    slice = Array.prototype.slice;
    stored_args = slice.call(arguments, 1);
    return function() {
      var args, new_args;
      new_args = slice.call(arguments);
      args = stored_args.concat(new_args);
      return fn.apply(null, args);
    };
  };

  added = function(x, y) {
    return x + y;
  };

  log(added(4, 3));

  newAdd = schonfinkelize(add, 5);

  log(newAdd(1));

  MYAPP = MYAPP || {};

  MYAPP.namespace = function(ns_string) {
    var j, len, parent, parts;
    parts = ns_string.split('.');
    parent = MYAPP;
    if (parts[0] === 'MYAPP') {
      parts = parts.slice(1);
    }
    for (j = 0, len = parts.length; j < len; j++) {
      i = parts[j];
      if (parent[i] == null) {
        parent[i] = {};
      }
      parent = parent[i];
    }
    return parent;
  };

  module2 = MYAPP.namespace('MYAPP.modules.module2');

  log(module2 === MYAPP.modules.module2);

  Gadget = (function() {
    var name;

    function Gadget() {}

    name = 'iPod';

    Gadget.prototype.getName = function() {
      return "getName returns " + name;
    };

    return Gadget;

  })();

  toy = new Gadget;

  log(toy.name);

  log(toy.getName());

  Foo = (function() {
    var foo;

    function Foo() {}

    foo = function() {
      return log("foo");
    };

    Foo.prototype.bar = function() {
      return foo();
    };

    return Foo;

  })();

  faz = new Foo;

  log(faz.bar());

  Gadget_2 = (function() {
    var specs;

    function Gadget_2() {}

    specs = {
      screenWidth: 333,
      screenHight: 777,
      color: 'black'
    };

    Gadget_2.prototype.getSpecs = function() {
      return specs;
    };

    return Gadget_2;

  })();

  sp = new Gadget_2;

  s = sp.getSpecs();

  s.price = 500;

  s.color = 'red';

  log(sp.getSpecs());

  log(sp.specs);

  myLitObj = (function() {
    var name;
    name = 'ojej';
    return {
      getName: function() {
        return log(name);
      }
    };
  })();

  myLitObj.getName();

  Gadget.prototype.twoPatterns = (function() {
    var browser;
    browser = 'Mobile kit';
    return {
      getBrowser: function() {
        return log(browser);
      }
    };
  })();

  for (i in toy) {
    log(i, ":", toy[i]);
  }

  Gadget.prototype = (function () {
    // zmienna prywatna
  var browser = "Mobile WebKit";
    // prototyp składowych publicznych
  return {
    getBrowser: function () {
      return browser;
    }
  };
}());;

  toy.twoPatterns.getBrowser();
  console.log(toy.getBrowser());

}).call(this);
